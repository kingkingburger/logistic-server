version: '3.9' # Docker Compose 버전 (필요에 따라 변경 가능)

services:
  mssql:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: mssql-server2
    environment:
      SA_PASSWORD: ${MSSQL_DATABASE_PASS}
      ACCEPT_EULA: Y
    ports:
      - '${DIMOA_DATABASE_PORT}:1433'
    networks:
      - overlay
    volumes:
      - mssql-data:/var/opt/mssql
    restart: always


  postgres:
    image: postgres:latest
    container_name: my_postgres2
    ports:
      - '${DATABASE_PORT}:5432'
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASS}
      POSTGRES_DB: ${DATABASE_NAME}
      TZ: 'Asia/Seoul' # 환경 변수 TZ에 시간대 설정 추가
    networks:
      - overlay
    volumes:
      - pgdata:/var/lib/postgresql/data # 데이터 볼륨 설정
    restart: always

  mqtt:
    image: eclipse-mosquitto:2.0
    container_name: mosquitto2
    ports:
      - '${MQTT_PORT}:1883'
    command: mosquitto -c /mosquitto-no-auth.conf
    networks:
      - overlay
    restart: always

#  simulation_mqtt:
#    image: eclipse-mosquitto:2.0
#    container_name: simulation_mqtt
#    ports:
#      - '1889:1883'
#    command: mosquitto -c /mosquitto-no-auth.conf
#    networks:
#      - overlay
#    restart: always

  redis:
    image: redis:latest
    container_name: my_redis2
    ports:
      - '6379:6379'
    networks:
      - overlay
    restart: always

  back-schedule: # 스케줄 서버
    container_name: schedule-server
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV}
      SCHEDULE: 'true' # 도커에서 돌가는 amr스케줄 실행 조건
      IF_ACTIVE: 'true' # 도커에서 돌가는 asrs 데이터 수집 실행 조건
      LOCAL_SCHEDULE: 'false' # 로컬에서 돌아가는 nas 파일 업로드 실행조건
      VMS_DATA: 'false' # 로컬에서 돌아가는 vms 체적 데이터 실행 옵션
      VMS_VOLUME: 'false' #로컬에서 돌아가는 vms 누락 체적데이터 가져오기 옵션
      LOGGING: 'false'
      LATENCY: ${LATENCY}
      VMSLATENCY: ${VMSLATENCY}
      AMRLATENCY: ${AMRLATENCY}
      DATABASE_HOST: host.docker.internal # Use host.docker.internal to refer to the host machine's IP
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASS: ${DATABASE_PASS}
      DATABASE_NAME: ${DATABASE_NAME}
      REDIS_HOST: host.docker.internal
      REDIS_PORT: ${REDIS_PORT}
      MQTT_HOST: host.docker.internal
      MQTT_PORT: ${MQTT_PORT}

      DIMOA_DATABASE_HOST: ${DIMOA_DATABASE_HOST}
      DIMOA_DATABASE_PORT: ${DIMOA_DATABASE_PORT}
      DIMOA_DATABASE_USER: ${DIMOA_DATABASE_USER}
      DIMOA_DATABASE_PASS: ${DIMOA_DATABASE_PASS}
      DIMOA_DATABASE_NAME: ${DIMOA_DATABASE_NAME}
      NAS_PATH: ${NAS_PATH}

      AMR_DATABASE_HOST: ${AMR_DATABASE_HOST}
      AMR_DATABASE_PORT: ${AMR_DATABASE_PORT}
      AMR_DATABASE_USER: ${AMR_DATABASE_USER}
      AMR_DATABASE_PASS: ${AMR_DATABASE_PASS}
      AMR_DATABASE_NAME: ${AMR_DATABASE_NAME}
      TZ: 'Asia/Seoul'
    ports:
      - '3001:3000'
    volumes:
      - logs-volume:/var/app/logs
    networks:
      - overlay
    links:
      - postgres:postgres
      - mqtt:mqtt
      - redis:redis
      - mssql:mssql
    restart: always

  simulation-server: # 시뮤레이션
    container_name: simulation-server
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV}
      SCHEDULE: 'false' # 도커에서 돌가는 amr스케줄 실행 조건
      IF_ACTIVE: 'false' # 도커에서 돌가는 asrs 데이터 수집 실행 조건
      LOCAL_SCHEDULE: 'false' # 로컬에서 돌아가는 nas 파일 업로드 실행조건
      VMS_DATA: 'false' # 로컬에서 돌아가는 vms 체적 데이터 실행 옵션
      VMS_VOLUME: 'false' #로컬에서 돌아가는 vms 누락 체적데이터 가져오기 옵션
      LOGGING: 'false'
      DATABASE_HOST: host.docker.internal # Use host.docker.internal to refer to the host machine's IP
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASS: ${DATABASE_PASS}
      DATABASE_NAME: 'hd_test2'
      REDIS_HOST: host.docker.internal
      REDIS_PORT: ${REDIS_PORT}
      MQTT_HOST: host.docker.internal
      MQTT_PORT: ${MQTT_PORT}
      LATENCY: ${LATENCY}
      VMSLATENCY: ${VMSLATENCY}
      AMRLATENCY: ${AMRLATENCY}

      DIMOA_DATABASE_HOST: ${DIMOA_DATABASE_HOST}
      DIMOA_DATABASE_PORT: ${DIMOA_DATABASE_PORT}
      DIMOA_DATABASE_USER: ${DIMOA_DATABASE_USER}
      DIMOA_DATABASE_PASS: ${DIMOA_DATABASE_PASS}
      DIMOA_DATABASE_NAME: ${DIMOA_DATABASE_NAME}
      NAS_PATH: ${NAS_PATH}

      AMR_DATABASE_HOST: ${AMR_DATABASE_HOST}
      AMR_DATABASE_PORT: ${AMR_DATABASE_PORT}
      AMR_DATABASE_USER: ${AMR_DATABASE_USER}
      AMR_DATABASE_PASS: ${AMR_DATABASE_PASS}
      AMR_DATABASE_NAME: ${AMR_DATABASE_NAME}
      PS_SERVER: 'http://10.220.128.100:5000'
      TZ: 'Asia/Seoul'
    ports:
      - '3003:3000'
    volumes:
      - logs-volume:/var/app/logs
    networks:
      - overlay
    links:
      - postgres:postgres
      - mqtt:mqtt
      - redis:redis
      - mssql:mssql
    restart: always


networks:
  overlay:

volumes:
  pgdata:
  mssql-data:
  logs-volume:
  volume_name_1:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: Z:\
  volume_name_2:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOCAL_UPLOAD_PATH}
